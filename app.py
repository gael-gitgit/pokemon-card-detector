import streamlit as st
from ultralytics import YOLO
import cv2
import numpy as np
from PIL import Image
import pickle
import time
import requests
import functions

# -----------------------------
# CONFIGURATION DE LA PAGE
# -----------------------------
st.set_page_config(
    page_title="Card Detector App",
    page_icon="üÉè",
    layout="wide"
)

st.title("üÉè Carte Detector & Matching")
st.markdown("T√©l√©charge une image pour d√©tecter et identifier les cartes gr√¢ce √† YOLO et la recherche de similarit√© FAISS.")

# -----------------------------
# CHARGEMENT DES MOD√àLES
# -----------------------------
@st.cache_resource
def load_all_models():
    collection, meta = functions.load_faiss_index()
    emb_model, preprocess, device = functions.load_embbedings_model()
    yolo_model = YOLO("models/my-modelv4.pt")
    return collection, meta, emb_model, preprocess, device, yolo_model

with st.spinner("Chargement des mod√®les..."):
    collection, meta, emb_model, preprocess, device, yolo_model = load_all_models()


# -----------------------------
# UPLOAD D'IMAGE
# -----------------------------
uploaded_file = st.file_uploader("üì§ Upload une image", type=["jpg", "jpeg", "png"])

if uploaded_file:
    image = Image.open(uploaded_file).convert("RGB")
    
else:
    st.info("Aucune image upload√©e. Une image al√©atoire sera utilis√©e pour la d√©mo.")
    image = Image.open(requests.get("https://picsum.photos/600/400", stream=True).raw).convert("RGB")

st.image(image, caption="Image d'entr√©e", width='stretch')

# -----------------------------
# D√âTECTION YOLO
# -----------------------------
if uploaded_file:
    with st.spinner("D√©tection des cartes en cours..."):
        # Convertir PIL ‚Üí array pour YOLO
        image = np.array(image)
        results = yolo_model.predict(source=image, conf=0.8, device="cpu")
        

    # -----------------------------
    # TRAITEMENT DES R√âSULTATS
    # -----------------------------
    if not results:
        st.warning("Aucune carte d√©tect√©e.")
    else:
        st.success(f"{len(results[0].boxes)} carte(s) d√©tect√©e(s).")
        col1, col2,col3 = st.columns(3)
        for r in results:
            masks = r.masks
            boxes = r.boxes

            if masks is None:
                st.warning("Aucun masque d√©tect√©.")
                continue

            # -----------------------------
            # AFFICHAGE R√âSULTATS
            # -----------------------------
            

            # Affichage des r√©sultats
            for i, m in enumerate(masks.data):
                # Conversion du masque en numpy (0 ou 1)
                mask = m.cpu().numpy()
                # Si masque est float (0.0‚Äì1.0) ‚Üí binarisation
                mask = (mask > 0.5).astype(np.uint8) * 255
                # V√©rifier la taille : doit √™tre HxW comme img
                if mask.shape != image.shape[:2]:
                    mask = cv2.resize(mask, (image.shape[1], image.shape[0]))
                # Appliquer le masque sur l'image
                segmented = cv2.bitwise_and(image, image, mask=mask)
                # Extraire la bbox correspondante
                box = boxes.xyxy[i].cpu().numpy().astype(int)
                x1, y1, x2, y2 = box
                crop = segmented[y1:y2, x1:x2]

                #red√©coupage de l'image
                crop = functions.preprocess_img(crop)
                crop = functions.improve_img(crop)

                # Recherche FAISS
                with st.spinner("Recherche de correspondances..."):
                    search_result = functions.search_card_correspondance(
                        collection, meta, crop, emb_model, preprocess, device
                    )

                with col1:
                    st.image(crop, caption=f"Carte d√©tect√©e #{i+1}",  width='stretch')
                with col2:
                    st.image(search_result['img'], caption=f"{search_result['name']} -  {search_result['distance']} -  {search_result['price_eur']}",  width='stretch')
        
        st.success("Analyse termin√©e ‚úÖ")

